--source include/have_debug.inc
FLUSH STATUS;
create table t1(abc int primary key, xyz int invisible);
SHOW STATUS LIKE 'Feature_invisible_columns';
desc t1;
show create table t1;
select * from INFORMATION_SCHEMA.COLUMNS where TABLE_SCHEMA='test' and TABLE_NAME='t1';
drop table t1;
--error ER_TABLE_MUST_HAVE_COLUMNS
create table t1(a1 int invisible);
--error ER_PARSE_ERROR
create table t1(a1 blob,invisible(a1));
--error ER_INVISIBLE_NOT_NULL_WITHOUT_DEFAULT
create table t1(a1 int primary key invisible ,a2 int unique invisible , a3 blob,a4 int not null invisible unique);
--error ER_INVISIBLE_NOT_NULL_WITHOUT_DEFAULT
create table t1(abc int not null invisible);
create table t1(a int invisible, b int);
#should automatically add null
insert into t1 values(1);
insert into t1(a) values(2);
insert into t1(b) values(3);
insert into t1(a,b) values(5,5);
select * from t1;
select a,b from t1;
delete from t1;
insert into t1 values(1),(2),(3),(4);
select * from t1;
select a from t1;
drop table t1;
--echo #more complex case of invisible
create table t1(a int , b int invisible , c int invisible auto_increment unique, d blob , e int unique, f int);
desc t1;
insert into t1 values(1,'d blob',1,1),(1,'d blob',11,1),(1,'d blob',2,1),(1,'d blob',3,1),(1,'d blob',41,1);
select * from t1;
drop table t1;
--error ER_PARSE_ERROR
create table sdsdsd(a int , b int, invisible(a,b));
create table t1(a int,abc int as (a mod 3) virtual invisible);
desc t1;
--error ER_WRONG_VALUE_COUNT_ON_ROW
insert into t1 values(1,default);
insert into t1 values(1),(22),(233);
select * from t1;
select a,abc from t1;
drop table t1;
create table t1(abc int primary key invisible auto_increment, a int);
desc t1;
show create table t1;
insert into t1 values(1);
insert into t1 values(2);
insert into t1 values(3);
select * from t1;
select abc,a from t1;
delete  from t1;
insert into t1 values(1),(2),(3),(4),(6);
select abc,a from t1;
drop table t1;
create table t1(abc int);
--error ER_TABLE_MUST_HAVE_COLUMNS
alter table t1 change abc ss int invisible;
alter table t1 add column xyz int;
alter table t1 modify column abc  int ;
desc t1;
--error ER_WRONG_VALUE_COUNT_ON_ROW
insert into t1 values(22);
alter table t1 modify column abc  int invisible;
desc t1;
insert into t1 values(12);
drop table t1;
--echo #some test on copy table structure with table data;
--echo #table with invisible fields and unique keys;
create table t1(a int , b int invisible , c int invisible auto_increment unique, d blob , e int unique, f int);
desc t1;
insert into t1 values(1,'d blob',1,1),(1,'d blob',11,1),(1,'d blob',2,1),(1,'d blob',3,1),(1,'d blob',41,1);
select * from t1;
select a,b,c,d,e,f from t1;
--echo #this wont copy invisible fields and keys;
create table t2 as select * from t1;
desc t2;
select * from t2;
--error ER_BAD_FIELD_ERROR
select a,b,c,d,e,f from t2;
drop table t2;
--echo #now this will copy invisible fields
create table t2 as select a,b,c,d,e,f from t1;
desc t2;
select * from t2;
select a,b,c,d,e,f from t2;
drop table t2,t1;
--echo #some test related to copy of data from one table to another;
create table t1(a int , b int invisible , c int invisible auto_increment unique, d blob , e int unique, f int);
insert into t1 values(1,'d blob',1,1),(1,'d blob',11,1),(1,'d blob',2,1),(1,'d blob',3,1),(1,'d blob',41,1);
select a,b,c,d,e,f from t1;
create table t2(a int , b int invisible , c int invisible , d blob , e int unique, f int);
insert into t2 select * from t1;
select a,b,c,d,e,f from t2;
truncate t2;
insert into t2 (a,b,c,d,e,f) select a,b,c,d,e,f from t1;
select a,b,c,d,e,f from t2;
truncate t2;
drop table t1,t2;
--echo #some test related to creating view on table with invisible column;
create table t1(a int , b int invisible , c int invisible auto_increment unique, d blob , e int unique, f int);
insert into t1 values(1,'d blob',1,1),(1,'d blob',11,1),(1,'d blob',2,1),(1,'d blob',3,1),(1,'d blob',41,1);
create view v as select * from t1;
desc v;
select * from v;
--echo #v does not have invisible column;
--error ER_BAD_FIELD_ERROR
select a,b,c,d,e,f from v;
insert into v values(1,21,32,4);
select * from v;
--error ER_BAD_FIELD_ERROR
insert into v(a,b,c,d,e,f) values(1,12,3,4,5,6);
drop view v;
create view v as select a,b,c,d,e,f from t1;
desc v;
select * from v;
--echo #v does  have invisible column but they aren't invisible anymore.
select a,b,c,d,e,f from v;
insert into v values(1,26,33,4,45,66);
select a,b,c,d,e,f from v;
insert into v(a,b,c,d,e,f) values(1,32,31,41,5,6);
select a,b,c,d,e,f from v;
drop view v;
drop table t1;
--echo #now invisible column in where and some join query
create table t1 (a int unique , b int invisible unique, c int unique  invisible);
insert into t1(a,b,c) values(1,1,1);
insert into t1(a,b,c) values(2,2,2);
insert into t1(a,b,c) values(3,3,3);
insert into t1(a,b,c) values(4,4,4);
insert into t1(a,b,c) values(21,21,26);
insert into t1(a,b,c) values(31,31,35);
insert into t1(a,b,c) values(41,41,45);
insert into t1(a,b,c) values(22,22,24);
insert into t1(a,b,c) values(32,32,33);
insert into t1(a,b,c) values(42,42,43);
explain select * from t1 where b=3;
select * from t1 where b=3;
explain select * from t1 where c=3;
select * from t1 where c=3;
create table t2 as select a,b,c from t1;
desc t2;
explain select * from t1,t2 where t1.b = t2.c and t1.c = t2.b;
select * from t1,t2 where t1.b = t2.c and t1.c = t2.b;
drop table t1,t2;
--echo #Unhide  invisible columns
create table t1 (a int primary key, b int invisible, c int invisible unique);
show create table t1;
desc t1;
alter table t1 modify column b int;
desc t1;
alter table t1 change column c d int;
desc t1;
drop table t1;
SHOW STATUS LIKE 'Feature_invisible_columns';
--echo #invisible is non reserved
create table t1(a int unique , invisible int invisible, c int );
desc t1;
alter table t1 change column invisible hid int invisible;
desc t1;
drop table t1;

##TEST for invisible coloumn level 2

set debug_dbug= "+d,test_pseudo_invisible";
create table t1(a int);
set debug_dbug="";

desc t1;
show create table t1;
insert into t1 values(1);
select * from t1;
select invisible ,a from t1;
drop table t1;

##TEST for invisible coloumn level 3

set debug_dbug= "+d,test_completely_invisible";
create table t1(a int);
set debug_dbug="";

desc t1;
show create table t1;
insert into t1 values(1);
select * from t1;

--error ER_BAD_FIELD_ERROR
select invisible ,a from t1;

set debug_dbug= "+d,test_completely_invisible";
select invisible ,a from t1;
set debug_dbug="";

drop table t1;

##TEST for Alter table for invisibleness level 2

set debug_dbug= "+d,test_pseudo_invisible";
create table t1(a int);
set debug_dbug="";

desc t1;
insert into t1 values(1);
select * from t1;
select invisible ,a from t1;

## Alter should not be possible

--error ER_BAD_FIELD_ERROR
ALTER table t1 change invisible b int;
select * from t1;
select invisible ,a from t1;

--error ER_BAD_FIELD_ERROR
ALTER table t1 modify invisible char;
select * from t1;
select invisible ,a from t1;

--error ER_CANT_DROP_FIELD_OR_KEY
ALTER table t1 drop invisible;
select * from t1;
select invisible ,a from t1;

--error ER_DUP_FIELDNAME
ALTER table t1 add invisible int;
select * from t1;
select invisible ,a from t1;

ALTER table t1 add invisible2 int default 2;
select * from t1;
select invisible ,a from t1;

drop table t1;

##TEST for Alter table for invisibleness level 3

set debug_dbug= "+d,test_completely_invisible";
create table t1(a int);

desc t1;
insert into t1 values(1);
select * from t1;
select invisible ,a from t1;

## Alter should not be possible

--error ER_BAD_FIELD_ERROR
ALTER table t1 change invisible b int;
select * from t1;
select invisible ,a from t1;

--error ER_BAD_FIELD_ERROR
ALTER table t1 modify invisible char;
select * from t1;
select invisible ,a from t1;

--error ER_CANT_DROP_FIELD_OR_KEY
ALTER table t1 drop invisible;
select * from t1;
select invisible ,a from t1;

--error ER_DUP_FIELDNAME
ALTER table t1 add invisible int;
select * from t1;
select invisible ,a from t1;

set debug_dbug="";
ALTER table t1 add hid int default 2;
set debug_dbug= "+d,test_completely_invisible";
select * from t1;
select invisible ,a from t1;

drop table t1;
set debug_dbug="";

## Test Index on USER_DEFINED_INVISIBLE

Create table t1( a int default(99) invisible, b int);
insert into t1 values(1);
insert into t1 values(2);
insert into t1 values(3);
insert into t1 values(4);
select * from t1;
alter table t1 add index(a);
alter table t1 add index(a,b);
show index from t1;
drop table t1;

## Test Index on PSEUDO_invisible_INVISIBLE

set debug_dbug= "+d,test_pseudo_invisible";
Create table t1( a int default(99) invisible, b int);

--error ER_KEY_COLUMN_DOES_NOT_EXITS
Create table t2( a int default(99) invisible, b int, unique(invisible));

set debug_dbug="";
insert into t1 values(1);
insert into t1 values(2);
insert into t1 values(3);
insert into t1 values(4);
select * from t1;
select invisible, a, b from t1;
--error ER_KEY_COLUMN_DOES_NOT_EXITS
alter table t1 add index(invisible);
--error ER_KEY_COLUMN_DOES_NOT_EXITS
alter table t1 add index(b,invisible);
show index from t1;
drop table t1;

## Test Index on COMPLETELY_INVISIBLE

set debug_dbug= "+d,test_completely_invisible";
Create table t1( a int default(99) invisible, b int);

--error ER_KEY_COLUMN_DOES_NOT_EXITS
Create table t2( a int default(99) invisible, b int, unique(invisible));
insert into t1 values(1);
insert into t1 values(2);
insert into t1 values(3);
insert into t1 values(4);
select * from t1;
select invisible, a, b from t1;
set debug_dbug="";

--error ER_KEY_COLUMN_DOES_NOT_EXITS
alter table t1 add index(invisible);
--error ER_KEY_COLUMN_DOES_NOT_EXITS
alter table t1 add index(b,invisible);
show index from t1;
drop table t1;
## Sytem Generated index on invisible column
set debug_dbug= "+d,test_completely_invisible,test_invisible_index";
Create table t1( a int default(99) , b int, index system_gen (invisible), index(b));
set debug_dbug="";
Show index from t1;
select * from INFORMATION_SCHEMA.STATISTICS where TABLE_SCHEMA ='test' and table_name='t1';
show create table t1;
insert into t1 values(1,1);
insert into t1 values(1,1);
insert into t1 values(1,1);
insert into t1 values(1,1);
set debug_dbug= "+d,test_completely_invisible";
select invisible, a ,b from t1;
explain select * from t1 where invisible =9;
set debug_dbug="";
alter table t1 add x int default 3;
set debug_dbug= "+d,test_completely_invisible";
select invisible, a ,b from t1;
set debug_dbug="";
Show index from t1;
## Sytem Generated Index modification
--error ER_KEY_COLUMN_DOES_NOT_EXITS
create index a1 on t1(invisible);
--error ER_CANT_DROP_FIELD_OR_KEY
drop index system_gen on t1;
drop table t1;